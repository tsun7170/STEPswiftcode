
SCHEMA debug1;
-----------------------------------
  CONSTANT
    dummy_gri                            : geometric_representation_item (*ENTITY*) :=
                                            representation_item( '' ) || geometric_representation_item(  );
  END_CONSTANT;

   FUNCTION build_axes(
               axis, ref_direction : direction
           ) : LIST [3 : 3] OF direction;

    LOCAL
      d1 : direction;
      d2 : direction;

			L1: string;
			L2: string;
			L3: string;

			V1: number := pi;
			V2: number := const_e;
			V3: number := ?;
    END_LOCAL;


			-- case test
			case L1 of
			'A','B','C':	L2 := 'ABC';
			'D','E','F':	L2 := 'DEF';
			'G':	L2 := 'G';
			'H':	L2 := 'H';
			OTHERWISE : L2 := 'otherwise';
			end_case;


			-- alias test
			ALIAS rd for ref_direction;
			ALIAS ax for axis;
			ALIAS ret for d1;
			ret := NVL( normalise( ax ), dummy_gri || direction( [0, 0, 1] ) );
			d2 := first_proj_axis( ret, rd );
			end_alias;
			end_alias;
			end_alias;


    d1 := NVL( normalise( axis ), dummy_gri || direction( [0, 0, 1] ) );
    d2 := first_proj_axis( d1, ref_direction );
--    RETURN( [d2, normalise( cross_product( d1, d2 ) )\vector.orientation, d1] );
    RETURN( [d2, d2, d1] );

  END_FUNCTION;


  ENTITY direction
    SUBTYPE OF ( geometric_representation_item );
      direction_ratios  : LIST [2 : 3] OF REAL;
  END_ENTITY;

  ENTITY vector
    SUBTYPE OF ( geometric_representation_item );
      orientation  : direction (*ENTITY*);
      magnitude    : length_measure (*TYPE*);
  END_ENTITY; -- vector



  ENTITY geometric_representation_item
    SUBTYPE OF ( representation_item );
    DERIVE
      dim  : dimension_count := dimension_of( SELF );
   END_ENTITY;



  ENTITY representation_item;
      name  : label;
  END_ENTITY;


  TYPE label = STRING;
  END_TYPE; -- label

  TYPE vector_or_direction = SELECT
    ( direction (*ENTITY*),
     vector (*ENTITY*) );
  END_TYPE; -- vector_or_direction

  TYPE length_measure = REAL;
  END_TYPE; -- length_measure

  TYPE dimension_count = INTEGER;
  END_TYPE; -- dimension_count

  FUNCTION normalise(
               arg : vector_or_direction (*TYPE*)
           ) : vector_or_direction (*TYPE*);

    LOCAL
      result : vector_or_direction (*TYPE*);
    END_LOCAL;
      result := ?;
    RETURN( result );

  END_FUNCTION; -- normalise


  FUNCTION first_proj_axis(
               z_axis, arg : direction (*ENTITY*)
           ) : direction (*ENTITY*);

      RETURN( ? );

  END_FUNCTION; -- first_proj_axis

  FUNCTION dimension_of(
               item : geometric_representation_item (*ENTITY*)
           ) : dimension_count (*TYPE*);

      RETURN( ? );

  END_FUNCTION; -- dimension_of

-----------------------------------
END_SCHEMA;
